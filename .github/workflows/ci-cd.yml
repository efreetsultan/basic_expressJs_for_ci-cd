name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: "eu-west-2"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Terraform
        run: |
          curl -LO "https://releases.hashicorp.com/terraform/1.1.0/terraform_1.1.0_linux_amd64.zip"
          unzip terraform_1.1.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: Terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: Terraform
        run: terraform apply -auto-approve

      - name: Build Docker Image
        working-directory: backend
        run: |
          docker build -t hello-jenkins .
          docker tag hello-jenkins ${{ steps.dynamic_outputs.outputs.IMAGE_NAME }}

#       - name: Run Tests
#         working-directory: test
#         run: |
#           docker run --rm -v $(pwd):/app -w /app node:14 npm install
#           docker run --rm -v $(pwd):/app -w /app node:14 npm test

      - name: Push Docker Image
        working-directory: app
        run: |
          docker push ${{ steps.dynamic_outputs.outputs.IMAGE_NAME }}
          docker save hello-jenkins -o hello-jenkins.tar

      - name: Deploy to EKS
        if: success() && contains(runner.job.status, 'completed')
        working-directory: k8s
        run: |
          docker load -i ../app/hello-jenkins.tar
          kubectl apply -f backend.yaml

      - name: Delete S3 Bucket Contents
        if: success() && contains(runner.job.status, 'completed')
        run: |
          S3_BUCKET_NAME=$(terraform output -raw s3_for_hosting)
          aws s3 rm s3://$S3_BUCKET_NAME --recursive

      - name: Build React App
        working-directory: client
        run: |
          npm install
          npm run build

      - name: Upload Build Folder to S3
        if: success() && contains(runner.job.status, 'completed')
        run: |
          S3_BUCKET_NAME=$(terraform output -raw s3_for_hosting)
          aws s3 sync build/ s3://$S3_BUCKET_NAME

  post_build:
    needs: build
    if: always()

    runs-on: ubuntu-latest

    steps:
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Get Service Info
        run: kubectl get svc -o wide
